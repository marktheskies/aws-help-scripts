---
AWSTemplateFormatVersion: "2010-09-09"
Description: Metric filters and alarms to assist with CIS Benchmark compliance

Parameters:
  NotificationEmailAddress:
    Type: String
  CloudTrailLogGroup:
    Type: String
Resources:
  SnsTopic:
    Type: AWS::SNS::Topic
  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SnsTopic
      Protocol: email
      Endpoint: !Ref NotificationEmailAddress
      Region: !Ref AWS::Region

  # 4.1 Ensure a log metric filter and alarm exist for unauthorized API calls
  UnauthorizedApiCallsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") }'
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: UnauthorizedApiCalls
  UnauthorizedApiCallsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: UnauthorizedApiCalls
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for anuthorized API calls
      AlarmName: UnauthorizedApiCalls
      AlarmActions:
        - !Ref SnsTopic

  # 4.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA
  ConsoleLoginWithoutMfaMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ ($.eventName = "ConsoleLogin") && ($.additionalEventData.MFAUsed != "Yes") && ($.userIdentity.sessionContext.sessionIssuer.arn != "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*/*") }'
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: ConsoleLoginWithoutMfa
  ConsoleLoginWithoutMfaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: ConsoleLoginWithoutMfa
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for console signin without MFA
      AlarmName: ConsoleLoginWithoutMfa
      AlarmActions:
        - !Ref SnsTopic

  # 4.3 Ensure a log metric filter and alarm exist for usage of "root" account
  RootAccountUsageMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ $.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent" }'
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: RootAccountUsage
  RootAccountUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: RootAccountUsage
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for root account usage
      AlarmName: RootAccountUsage
      AlarmActions:
        - !Ref SnsTopic

  # 4.4 Ensure a log metric filter and alarm exist for IAM policy changes
  IamPolicyChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: IamPolicyChanges
  IamPolicyChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: IamPolicyChanges
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for IAM policy changes
      AlarmName: IamPolicyChanges
      AlarmActions:
        - !Ref SnsTopic

  # 4.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes
  CloudTrailConfigurationChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging)}"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: CloudTrailConfigurationChanges
  CloudTrailConfigurationChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: CloudTrailConfigurationChanges
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for CloudTrail configuration changes
      AlarmName: CloudTrailConfigurationChanges
      AlarmActions:
        - !Ref SnsTopic

  # 4.6 Ensure a log metric filter and alarm exist for AWS Management Console authentication failures
  ConsoleAuthFailuresMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '{ ($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication") }'
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: ConsoleAuthFailures
  ConsoleAuthFailuresAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: ConsoleAuthFailures
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for AWS console authentication failures
      AlarmName: ConsoleAuthFailures
      AlarmActions:
        - !Ref SnsTopic

  # 4.7 Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs
  KmsCmkDisablingOrScheduledDeletionMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion)) }"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: KmsCmkDisablingOrScheduledDeletion
  KmsCmkDisablingOrScheduledDeletionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: KmsCmkDisablingOrScheduledDeletion
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for KMS CMK changed state to Disabled or Scheduled Deletion
      AlarmName: KmsCmkDisablingOrScheduledDeletion
      AlarmActions:
        - !Ref SnsTopic

  # 4.8  Ensure a log metric filter and alarm exist for S3 bucket policy changes
  S3BucketPolicyChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: S3BucketPolicyChanges
  S3BucketPolicyChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: S3BucketPolicyChanges
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for S3 bucket policy changes
      AlarmName: S3BucketPolicyChanges
      AlarmActions:
        - !Ref SnsTopic

  # 4.9 Ensure a log metric filter and alarm exist for AWS Config configuration changes
  AwsConfigConfigurationChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{($.eventSource = config.amazonaws.com) && (($.eventName = StopConfigurationRecorder) || ($.eventName = DeleteDeliveryChannel) || ($.eventName = PutDeliveryChannel) || ($.eventName = PutConfigurationRecorder))}"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: AwsConfigConfigurationChanges
  AwsConfigConfigurationChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: AwsConfigConfigurationChanges
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for AWS Config configuration changes
      AlarmName: AwsConfigConfigurationChanges
      AlarmActions:
        - !Ref SnsTopic

  # 4.10 Ensure a log metric filter and alarm exist for security group changes
  SecurityGroupChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: SecurityGroupChanges
  SecurityGroupChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: SecurityGroupChanges
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for security group changes
      AlarmName: SecurityGroupChanges
      AlarmActions:
        - !Ref SnsTopic

  # 4.11 Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)
  NaclChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: NaclChanges
  NaclChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: NaclChanges
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for NACL changes
      AlarmName: NaclChanges
      AlarmActions:
        - !Ref SnsTopic

  # 4.12 Ensure a log metric filter and alarm exist for changes to network gateways
  NetworkGatewayChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: NetworkGatewayChanges
  NetworkGatewayChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: NetworkGatewayChanges
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for network gateway changes
      AlarmName: NetworkGatewayChanges
      AlarmActions:
        - !Ref SnsTopic

  # 4.13 Ensure a log metric filter and alarm exist for route table changes
  RouteTableChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: RouteTableChanges
  RouteTableChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: RouteTableChanges
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for route table changes
      AlarmName: RouteTableChanges
      AlarmActions:
        - !Ref SnsTopic

  # 4.14 Ensure a log metric filter and alarm exist for VPC changes
  VpcChangesMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }"
      LogGroupName: !Ref CloudTrailLogGroup
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: CISBenchmark
          MetricName: VpcChanges
  VpcChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: VpcChanges
      Namespace: CISBenchmark
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Threshold: 1
      Statistic: Sum
      AlarmDescription: Alarm for VPC changes
      AlarmName: VpcChanges
      AlarmActions:
        - !Ref SnsTopic
